AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  SSHKeyName:
    Description: 'Name of the ec2 key you need one to use this template'
    Type: 'AWS::EC2::KeyPair::KeyName'
    Default: CaMyPrivateKeyMB3
  DBNameOrder:
    Default: orders
    Description: The database name
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric
      characters.
  DBNameProduct:
    Default: product
    Description: The database name
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric
      characters.
  DBNameUser:
    Default: user
    Description: The database name
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric
      characters.
  DBUser:
    Default: 'root'
    NoEcho: 'true'
    Description: The database admin account username
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric
      characters.
  DBPassword:
    Default: '101091Root'
    NoEcho: 'true'
    Description: The database admin account password
    Type: String
    MinLength: '1'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]+'
    ConstraintDescription: must contain only alphanumeric characters.
  DBAllocatedStorage:
    Default: '5'
    Description: The size of the database (Gb)
    Type: Number
    MinValue: '5'
    MaxValue: '1024'
    ConstraintDescription: must be between 5 and 1024Gb.
  DBInstanceClass:
    Description: The database instance type
    Type: String
    Default: db.t2.small
    AllowedValues: [db.t1.micro, db.m1.small, db.m1.medium, db.m1.large, db.m1.xlarge,
                    db.m2.xlarge, db.m2.2xlarge, db.m2.4xlarge, db.m3.medium, db.m3.large, db.m3.xlarge,
                    db.m3.2xlarge, db.m4.large, db.m4.xlarge, db.m4.2xlarge, db.m4.4xlarge, db.m4.10xlarge,
                    db.r3.large, db.r3.xlarge, db.r3.2xlarge, db.r3.4xlarge, db.r3.8xlarge, db.m2.xlarge,
                    db.m2.2xlarge, db.m2.4xlarge, db.cr1.8xlarge, db.t2.micro, db.t2.small, db.t2.medium,
                    db.t2.large]
    ConstraintDescription: must select a valid database instance type.
  MultiAZ:
    Description: Multi-AZ master database
    Type: String
    Default: 'false'
    AllowedValues: ['true', 'false']
    ConstraintDescription: must be true or false.
  DesiredCapacity:
    Type: Number
    Default: '2'
    Description: Number of instances to launch in your ECS cluster.
  MaxSize:
    Type: Number
    Default: '2'
    Description: Maximum number of instances that can be launched in your ECS cluster.
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.large
    AllowedValues: [t2.micro, t2.small, t2.medium, t2.large, t2.xlarge, t3.micro, t3.small,
      t3.medium, t3.large, t3.xlarge, m4.large, m4.xlarge, m5.large, m5.xlarge, c4.large,
      c4.xlarge, c5.large, c5.xlarge, r4.large, r4.xlarge, r5.large, r5.xlarge, i3.large,
      i3.xlarge]
    ConstraintDescription: Please choose a valid instance type.
  LoadBalancerName:
    Type: String
    Default: 'alb-MyFrontend'
  ECSAMI:
    Description: AMI ID
    Type: AWS::SSM::Parameter::Value<String>
    Default: /aws/service/ecs/optimized-ami/amazon-linux/recommended/image_id
Mappings:
  SubnetConfig:
    VPC:
      CIDR: '10.0.0.0/16'
    PublicOne:
      CIDR: '10.0.0.0/24'
    PublicTwo:
      CIDR: '10.0.1.0/24'
  AmazonLinuxAMI:
    us-east-1:
      AMI: ami-6df8fe7a
    us-east-2:
      AMI: ami-c6b5efa3
    us-west-1:
      AMI: ami-1eda8d7e
    us-west-2:
      AMI: ami-a2ca61c2
    eu-west-1:
      AMI: ami-ba346ec9
    eu-west-2:
      AMI: ami-42c5cf26
    eu-central-1:
      AMI: ami-e012d48f
    ap-northeast-1:
      AMI: ami-08f7956f
    ap-southeast-1:
      AMI: ami-f4832f97
    ap-southeast-2:
      AMI: ami-774b7314
    ca-central-1:
      AMI: ami-be45f7da
Resources:
  # VPC into which stack instances will be placed
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !FindInMap ['SubnetConfig', 'VPC', 'CIDR']
  HostedZone:
    Type: 'AWS::Route53::HostedZone'
    Properties:
      HostedZoneConfig:
        Comment: Hosted Zone for ECS Service Discovery
      Name: servicelookup.internal
      VPCs:
        - VPCId: !Ref VPC
          VPCRegion: !Ref 'AWS::Region'
  PublicSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 0
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PublicOne', 'CIDR']
      MapPublicIpOnLaunch: true
  PublicSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 1
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PublicTwo', 'CIDR']
      MapPublicIpOnLaunch: true
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  GatewayAttachement:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'VPC'
      InternetGatewayId: !Ref 'InternetGateway'
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachement
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'
  PublicSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetOne
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetTwo
      RouteTableId: !Ref PublicRouteTable
  # EC2/DB2 Security Groups
  DB2EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupDescription: 'DB Acces'
        GroupName: sgRDSMB3
        VpcId:
          Ref: VPC
        SecurityGroupIngress:
            - IpProtocol: tcp
              FromPort: 3306
              ToPort: 3306
              CidrIp: 0.0.0.0/0
  ECSInstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    DependsOn: GatewayAttachement
    Properties:
      GroupDescription: Security Group for ECSInstance
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: ECSInstanceSecurityGroup
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: database subNet Group
      SubnetIds:
        - !Ref PublicSubnetOne
        - !Ref PublicSubnetTwo
      Tags:
        - Key: Name
          Value: sg-DBSDatabase
  # RDS Resources
  MasterDBUser:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: !Ref 'DBNameUser'
      DBInstanceIdentifier: 'MB3-db-user'
      AllocatedStorage: !Ref 'DBAllocatedStorage'
      DBInstanceClass: !Ref 'DBInstanceClass'
      Engine: MySQL
      MasterUsername: !Ref 'DBUser'
      MasterUserPassword: !Ref 'DBPassword'
      MultiAZ: !Ref 'MultiAZ'
      Tags:
        - Key: Name
          Value: Master Database
      VPCSecurityGroups: 
        - !Ref 'DB2EC2SecurityGroup'
      DBSubnetGroupName: !Ref 'DBSubnetGroup'
    DeletionPolicy: Snapshot

  
  InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref InstanceRole  
  # ECS Resources
  ECSCluster:
    Type: AWS::ECS::Cluster
    DependsOn: HostedZone
  FrontendRepository:
    Type: 'AWS::ECR::Repository'
    Properties:
      RepositoryName: frontend-mb3-service
  UserRepository:
    Type: 'AWS::ECR::Repository'
    Properties:
      RepositoryName: user-mb3-service
  ProductRepository:
    Type: 'AWS::ECR::Repository'
    Properties:
      RepositoryName: product-mb3-service
  OrderRepository:
    Type: 'AWS::ECR::Repository'
    Properties:
      RepositoryName: order-mb3-service
  DockerBuildWaitHandle:
    Type: 'AWS::CloudFormation::WaitConditionHandle'
  DockerBuildWaitCondition:
    Type: 'AWS::CloudFormation::WaitCondition'
    DependsOn: DockerBuilder
    Properties:
      Handle: !Ref DockerBuildWaitHandle
      Timeout: '7200'
  DockerBuilder:
    Type: 'AWS::EC2::Instance'
    DependsOn:
      - OrderRepository
      - ProductRepository
      - UserRepository
      - FrontendRepository
    Properties:
      KeyName: !Ref SSHKeyName
      ImageId: !FindInMap 
        - AmazonLinuxAMI
        - !Ref 'AWS::Region'
        - AMI
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref InstanceProfile
      NetworkInterfaces:
        - AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          GroupSet:
            - !Ref EcsSecurityGroup
          SubnetId: !Ref PublicSubnetOne
      UserData: !Base64 
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash
            - |
              yum install -y aws-cfn-bootstrap
            - |
              yum update -y aws-cfn-bootstrap
            - |
              yum install -y git aws-cli
            - |
              git clone https://github.com/radianv/master-builder-3.git
            - |
              $(aws ecr get-login --no-include-email --region ${AWS::Region})
            - 'docker build -t '
            - !Ref 'AWS::AccountId'
            - .dkr.ecr.
            - !Ref 'AWS::Region'
            - >
              .amazonaws.com/frontend-mb3-service
              master-builder-3/workspace/dev/code-webapp-micro/frontend
            - 'docker build -t '
            - !Ref 'AWS::AccountId'
            - .dkr.ecr.
            - !Ref 'AWS::Region'
            - >
              .amazonaws.com/user-mb3-service
              master-builder-3/workspace/dev/code-webapp-micro/user_service
            - 'docker build -t '
            - !Ref 'AWS::AccountId'
            - .dkr.ecr.
            - !Ref 'AWS::Region'
            - >
              .amazonaws.com/product-mb3-service
              master-builder-3/workspace/dev/code-webapp-micro/product_service
            - 'docker build -t '
            - !Ref 'AWS::AccountId'
            - .dkr.ecr.
            - !Ref 'AWS::Region'
            - >
              .amazonaws.com/order-mb3-service
              master-builder-3/workspace/dev/code-webapp-micro/order_service
            - 'docker push '
            - !Ref 'AWS::AccountId'
            - .dkr.ecr.
            - !Ref 'AWS::Region'
            - >
              .amazonaws.com/order-mb3-service
            - /opt/aws/bin/cfn-signal -e 0 -r "Build Process Complete" '
            - !Ref DockerBuildWaitHandle
            - |
              '
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackName'
        - Key: Name
          Value: ECS refarch instance docker builder - MB3
  UserDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    DependsOn: DockerBuildWaitCondition
    Properties:
      ContainerDefinitions:
        - Name: time-service
          Image: !Join 
            - ''
            - - !Ref 'AWS::AccountId'
              - .dkr.ecr.
              - !Ref 'AWS::Region'
              - '.amazonaws.com/user-mb3-service'
          Cpu: '100'
          Memory: '100'
          PortMappings:
            - ContainerPort: 5000
          Essential: true
          Environment:
            - Name: TIME_USERNAME
              Value: admin
            - Name: TIME_PASSWORD
              Value: password
            - Name: SERVICE_8081_NAME
              Value: _time._tcp
  FrontendDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    DependsOn: DockerBuildWaitCondition
    Properties:
      ContainerDefinitions:
        - Name: frontend-service
          Image: !Join 
            - ''
            - - !Ref 'AWS::AccountId'
              - .dkr.ecr.
              - !Ref 'AWS::Region'
              - '.amazonaws.com/frontend-mb3-service'
          Cpu: '200'
          Memory: '200'
          PortMappings:
            - ContainerPort: 5000
              HostPort: 80
          Essential: true
          Environment:
            - Name: CALC_USERNAME
              Value: admin
            - Name: CALC_PASSWORD
              Value: password
            - Name: TIME_USERNAME
              Value: admin
            - Name: TIME_PASSWORD
              Value: password
  ECSALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: '30'
      Subnets:
        - !Ref PublicSubnetOne
        - !Ref PublicSubnetTwo
      SecurityGroups: [!Ref 'EcsSecurityGroup']
  TargetGroup1:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC
  Listener1:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup1
      LoadBalancerArn: !Ref ECSALB
      Port: '80'
      Protocol: HTTP
  UserService:
    Type: 'AWS::ECS::Service'
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: 2
      TaskDefinition: !Ref UserDefinition
  EcsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS Security Group
      VpcId: !Ref 'VPC'
  EcsSecurityGroupHTTPinbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'EcsSecurityGroup'
      IpProtocol: tcp
      FromPort: '80'
      ToPort: '80'
      CidrIp: 0.0.0.0/0
  EcsSecurityGroupSSHinbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'EcsSecurityGroup'
      IpProtocol: tcp
      FromPort: '22'
      ToPort: '22'
      CidrIp: 0.0.0.0/0
  EcsSecurityGroupALBports:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'EcsSecurityGroup'
      IpProtocol: tcp
      FromPort: '31000'
      ToPort: '61000'
      SourceSecurityGroupId: !Ref 'EcsSecurityGroup'
  CloudwatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['-', [ECSLogGroup, !Ref 'AWS::StackName']]
      RetentionInDays: 14
  
  ECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref PublicSubnetOne
        - !Ref PublicSubnetTwo
      LaunchConfigurationName: !Ref 'ContainerInstances'
      MinSize: '1'
      MaxSize: !Ref 'MaxSize'
      DesiredCapacity: !Ref 'DesiredCapacity'
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: 'true'
  ContainerInstances:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref ECSAMI
      SecurityGroups: [!Ref 'EcsSecurityGroup']
      InstanceType: !Ref 'InstanceType'
      KeyName:
          Ref: SSHKeyName
      IamInstanceProfile: !Ref 'EC2InstanceProfile'
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
          yum install -y aws-cfn-bootstrap
          yum -y localinstall https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm
          yum  install -y mysql-community-client
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ECSAutoScalingGroup --region ${AWS::Region}
  ECSRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole'
      Path: /
  InstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - >-
          arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
        - 'arn:aws:iam::aws:policy/AmazonRoute53FullAccess'
        - 'arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPowerUser'
      Path: /
  ECSServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - 'elasticloadbalancing:DeregisterInstancesFromLoadBalancer'
              - 'elasticloadbalancing:DeregisterTargets'
              - 'elasticloadbalancing:Describe*'
              - 'elasticloadbalancing:RegisterInstancesWithLoadBalancer'
              - 'elasticloadbalancing:RegisterTargets'
              - 'ec2:Describe*'
              - 'ec2:AuthorizeSecurityGroupIngress'
            Resource: '*'
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ec2.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - 'ecs:CreateCluster'
              - 'ecs:DeregisterContainerInstance'
              - 'ecs:DiscoverPollEndpoint'
              - 'ecs:Poll'
              - 'ecs:RegisterContainerInstance'
              - 'ecs:StartTelemetrySession'
              - 'ecs:Submit*'
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
              - 'ecr:GetAuthorizationToken'
              - 'ecr:BatchGetImage'
              - 'ecr:GetDownloadUrlForLayer'
            Resource: '*'
  AutoscalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [application-autoscaling.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: service-autoscaling
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - 'application-autoscaling:*'
              - 'cloudwatch:DescribeAlarms'
              - 'cloudwatch:PutMetricAlarm'
              - 'ecs:DescribeServices'
              - 'ecs:UpdateService'
            Resource: '*'
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [!Ref 'EC2Role']

Outputs:
  PortalURL:
    Description: Portal URL
    Value: !Join 
      - ''
      - - 'http://'
        - !GetAtt 
          - ECSALB
          - DNSName
        - /
  ClusterName:
    Description: The name of the ECS cluster, used by the deploy script
    Value: !Ref 'ECSCluster'
    Export:
      Name: !Join [':', [!Ref "AWS::StackName", "ClusterName" ]]
  Url:
    Description: The url at which the application is available
    Value: !Join ['', [!GetAtt 'ECSALB.DNSName']]
  ALBArn:
    Description: The ARN of the ALB, exported for later use in creating services
    Value: !Ref 'ECSALB'
    Export:
      Name: !Join [':', [!Ref "AWS::StackName", "ALBArn" ]]
  ECSRole:
    Description: The ARN of the ECS role, exports for later use in creating services
    Value: !GetAtt 'ECSServiceRole.Arn'
    Export:
      Name: !Join [':', [!Ref "AWS::StackName", "ECSRole" ]]
  VPCId:
    Description: The ID of the VPC that this stack is deployed in
    Value: !Ref 'VPC'
    Export:
      Name: !Join [':', [!Ref "AWS::StackName", "VPCId" ]]
