AWSTemplateFormatVersion: 2010-09-09
Description: ECS Environment with Service Discovery
Parameters:
  KeyName:
    Type: 'AWS::EC2::KeyPair::KeyName'
    Default: CaMyPrivateKeyMB3
    Description: Name of an existing EC2 KeyPair
  ECSInstanceType:
    Type: String
    Description: ECS instance type
    Default: t2.large
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
    ConstraintDescription: 'Must be t2.micro, t2.small, t2.medium, t2.large'
  ECSClusterInstanceCount:
    Type: Number
    Description: The number of EC2 instances in the ECS Cluster
    Default: '2'
    AllowedValues:
      - '2'
      - '3'
      - '4'
  DBNameOrder:
    Default: orders
    Description: The database name
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric
      characters.
  DBNameProduct:
    Default: product
    Description: The database name
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric
      characters.
  DBNameUser:
    Default: user
    Description: The database name
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric
      characters.
  DBUser:
    Default: 'root'
    NoEcho: 'true'
    Description: The database admin account username
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric
      characters.
  DBPassword:
    Default: '101091Root'
    NoEcho: 'true'
    Description: The database admin account password
    Type: String
    MinLength: '1'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]+'
    ConstraintDescription: must contain only alphanumeric characters.
  DBAllocatedStorage:
    Default: '5'
    Description: The size of the database (Gb)
    Type: Number
    MinValue: '5'
    MaxValue: '1024'
    ConstraintDescription: must be between 5 and 1024Gb.
  DBInstanceClass:
    Description: The database instance type
    Type: String
    Default: db.t2.small
    AllowedValues: [db.t1.micro, db.m1.small, db.m1.medium, db.m1.large, db.m1.xlarge,
                    db.m2.xlarge, db.m2.2xlarge, db.m2.4xlarge, db.m3.medium, db.m3.large, db.m3.xlarge,
                    db.m3.2xlarge, db.m4.large, db.m4.xlarge, db.m4.2xlarge, db.m4.4xlarge, db.m4.10xlarge,
                    db.r3.large, db.r3.xlarge, db.r3.2xlarge, db.r3.4xlarge, db.r3.8xlarge, db.m2.xlarge,
                    db.m2.2xlarge, db.m2.4xlarge, db.cr1.8xlarge, db.t2.micro, db.t2.small, db.t2.medium,
                    db.t2.large]
    ConstraintDescription: must select a valid database instance type.
  MultiAZ:
    Description: Multi-AZ master database
    Type: String
    Default: 'false'
    AllowedValues: ['true', 'false']
    ConstraintDescription: must be true or false.
Mappings:
  AmazonLinuxAMI:
    us-east-1:
      AMI: ami-6df8fe7a
    us-east-2:
      AMI: ami-c6b5efa3
    us-west-1:
      AMI: ami-1eda8d7e
    us-west-2:
      AMI: ami-a2ca61c2
    eu-west-1:
      AMI: ami-ba346ec9
    eu-west-2:
      AMI: ami-42c5cf26
    eu-central-1:
      AMI: ami-e012d48f
    ap-northeast-1:
      AMI: ami-08f7956f
    ap-southeast-1:
      AMI: ami-f4832f97
    ap-southeast-2:
      AMI: ami-774b7314
    ca-central-1:
      AMI: ami-be45f7da
  VPCLayout:
    VPC:
      CIDR: 10.5.0.0/16
    PublicSubnet1Config:
      CIDR: 10.5.10.0/24
    PublicSubnet2Config:
      CIDR: 10.5.15.0/24
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      CidrBlock: !FindInMap 
        - VPCLayout
        - VPC
        - CIDR
      Tags:
        - Key: VPC
          Value: ECS
        - Key: Name
          Value: ECS refarch service discovery MB3
  HostedZone:
    Type: 'AWS::Route53::HostedZone'
    Properties:
      HostedZoneConfig:
        Comment: Hosted Zone for ECS Service Discovery
      Name: servicediscovery.internal
      VPCs:
        - VPCId: !Ref VPC
          VPCRegion: !Ref 'AWS::Region'
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    DependsOn: VPC
  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    DependsOn:
      - VPC
      - InternetGateway
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    DependsOn: AttachGateway
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap 
        - VPCLayout
        - PublicSubnet1Config
        - CIDR
      AvailabilityZone: !Select 
        - '0'
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: Public Subnet 1 MB3
  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    DependsOn: AttachGateway
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap 
        - VPCLayout
        - PublicSubnet2Config
        - CIDR
      AvailabilityZone: !Select 
        - '1'
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: Public Subnet 2 MB3
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    DependsOn:
      - VPC
      - AttachGateway
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public MB3
  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn:
      - PublicRouteTable
      - AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn:
      - PublicRouteTable
      - PublicSubnet1
      - AttachGateway
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
  PublicSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn:
      - PublicRouteTable
      - PublicSubnet2
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable
  ECSInstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    DependsOn: AttachGateway
    Properties:
      GroupDescription: Security Group for ECSInstance
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: ECSInstanceSecurityGroup MB3
  DB2EC2SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
        GroupDescription: 'DB Acces'
        GroupName: sgRDSMB3
        VpcId:
          Ref: VPC
        SecurityGroupIngress:
            - IpProtocol: tcp
              FromPort: 3306
              ToPort: 3306
              CidrIp: 0.0.0.0/0
  ECSInstanceSecurityGroupApps:
    Type: 'AWS::EC2::SecurityGroupIngress'
    DependsOn: ECSInstanceSecurityGroup
    Properties:
      GroupId: !Ref ECSInstanceSecurityGroup
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      SourceSecurityGroupId: !Ref ECSInstanceSecurityGroup
  ECSInstanceSecurityGroupAppsSSH:
    Type: 'AWS::EC2::SecurityGroupIngress'
    DependsOn: ECSInstanceSecurityGroup
    Properties:
      GroupId: !Ref ECSInstanceSecurityGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: 0.0.0.0/0
  ECSInstanceSecurityGroupAppsWeb:
    Type: 'AWS::EC2::SecurityGroupIngress'
    DependsOn: ECSInstanceSecurityGroup
    Properties:
      GroupId: !Ref ECSInstanceSecurityGroup
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: 0.0.0.0/0
  LaunchConfig:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Metadata:
      Comment: Install a simple application
      'AWS::CloudFormation::Init':
        config:
          files:
            /etc/init/ecssd_agent.conf:
              source: >-
                https://raw.githubusercontent.com/awslabs/service-discovery-ecs-dns/1.0/ecssd_agent.conf
              mode: '000644'
              owner: root
              group: root
            /usr/local/bin/ecssd_agent:
              source: >-
                https://github.com/awslabs/service-discovery-ecs-dns/releases/download/1.6/ecssd_agent
              mode: '000755'
              owner: root
              group: root
    Properties:
      KeyName: !Ref KeyName
      ImageId: !FindInMap 
        - AmazonLinuxAMI
        - !Ref 'AWS::Region'
        - AMI
      SecurityGroups:
        - !Ref ECSInstanceSecurityGroup
      InstanceType: !Ref ECSInstanceType
      AssociatePublicIpAddress: 'true'
      IamInstanceProfile: !GetAtt 
        - InstanceProfile
        - Arn
      UserData: !Base64 
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash
            - echo ECS_CLUSTER=
            - !Ref ECSCluster
            - |2
               >> /etc/ecs/ecs.config
            - |
              yum install -y aws-cfn-bootstrap
            - |
              yum update -y aws-cfn-bootstrap
            - '/opt/aws/bin/cfn-init -v '
            - '         --stack '
            - !Ref 'AWS::StackName'
            - '         --resource LaunchConfig '
            - '         --region '
            - !Ref 'AWS::Region'
            - |+

            - |
              start ecssd_agent
  ServerGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      AvailabilityZones:
        - !GetAtt 
          - PublicSubnet1
          - AvailabilityZone
        - !GetAtt 
          - PublicSubnet2
          - AvailabilityZone
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      LaunchConfigurationName: !Ref LaunchConfig
      MinSize: !Ref ECSClusterInstanceCount
      MaxSize: !Ref ECSClusterInstanceCount
      DesiredCapacity: !Ref ECSClusterInstanceCount
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackName'
          PropagateAtLaunch: 'true'
        - Key: Name
          Value: ECS refarch instance MB3
          PropagateAtLaunch: 'true'
  InstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - >-
          arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
        - 'arn:aws:iam::aws:policy/AmazonRoute53FullAccess'
        - 'arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPowerUser'
      Path: /
  ECSRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole'
      Path: /
  InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref InstanceRole
  ECSCluster:
    Type: 'AWS::ECS::Cluster'
    DependsOn: HostedZone
  FrontendRepository:
    Type: 'AWS::ECR::Repository'
    Properties:
      RepositoryName: frontend-mb3-service
  UserRepository:
    Type: 'AWS::ECR::Repository'
    Properties:
      RepositoryName: user-mb3-service
  ProductRepository:
    Type: 'AWS::ECR::Repository'
    Properties:
      RepositoryName: product-mb3-service
  OrderRepository:
    Type: 'AWS::ECR::Repository'
    Properties:
      RepositoryName: order-mb3-service
  DockerBuildWaitHandle:
    Type: 'AWS::CloudFormation::WaitConditionHandle'
  DockerBuildWaitCondition:
    Type: 'AWS::CloudFormation::WaitCondition'
    DependsOn: DockerBuilder
    Properties:
      Handle: !Ref DockerBuildWaitHandle
      Timeout: '7200'
  DockerBuilder:
    Type: 'AWS::EC2::Instance'
    DependsOn:
      - OrderRepository
      - ProductRepository
      - UserRepository
      - FrontendRepository
    Properties:
      KeyName: !Ref KeyName
      ImageId: !FindInMap 
        - AmazonLinuxAMI
        - !Ref 'AWS::Region'
        - AMI
      InstanceType: !Ref ECSInstanceType
      IamInstanceProfile: !Ref InstanceProfile
      NetworkInterfaces:
        - AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          GroupSet:
            - !Ref ECSInstanceSecurityGroup
          SubnetId: !Ref PublicSubnet1
      UserData: !Base64 
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash
            - |
              yum install -y aws-cfn-bootstrap
            - |
              yum update -y aws-cfn-bootstrap
            - |
              yum install -y git aws-cli
            - |
              git clone https://github.com/radianv/master-builder-3.git
            - |
              $(aws ecr get-login --no-include-email --region ${AWS::Region})
            - 'docker build -t '
            - !Ref 'AWS::AccountId'
            - .dkr.ecr.
            - !Ref 'AWS::Region'
            - >
              .amazonaws.com/frontend-mb3-service
              master-builder-3/workspace/dev/code-webapp-micro/frontend
            - 'docker build -t '
            - !Ref 'AWS::AccountId'
            - .dkr.ecr.
            - !Ref 'AWS::Region'
            - >
              .amazonaws.com/user-mb3-service
              master-builder-3/workspace/dev/code-webapp-micro/user_service
            - 'docker build -t '
            - !Ref 'AWS::AccountId'
            - .dkr.ecr.
            - !Ref 'AWS::Region'
            - >
              .amazonaws.com/product-mb3-service
              master-builder-3/workspace/dev/code-webapp-micro/product_service
            - 'docker build -t '
            - !Ref 'AWS::AccountId'
            - .dkr.ecr.
            - !Ref 'AWS::Region'
            - >
              .amazonaws.com/order-mb3-service
              master-builder-3/workspace/dev/code-webapp-micro/order_service
            - 'docker push '
            - !Ref 'AWS::AccountId'
            - .dkr.ecr.
            - !Ref 'AWS::Region'
            - >
              .amazonaws.com/order-mb3-service
            - /opt/aws/bin/cfn-signal -e 0 -r "Build Process Complete" '
            - !Ref DockerBuildWaitHandle
            - |
              '
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackName'
        - Key: Name
          Value: ECS refarch instance docker builder MB3
  # RDS Resources
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: database subNet Group
      SubnetIds:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: sg-DBSDatabase MB3
  MasterDBUser:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: !Ref 'DBNameUser'
      DBInstanceIdentifier: 'MB3-db-user'
      AllocatedStorage: !Ref 'DBAllocatedStorage'
      DBInstanceClass: !Ref 'DBInstanceClass'
      Engine: MySQL
      MasterUsername: !Ref 'DBUser'
      MasterUserPassword: !Ref 'DBPassword'
      MultiAZ: !Ref 'MultiAZ'
      Tags:
        - Key: Name
          Value: Master Database MB3
      VPCSecurityGroups: 
        - !Ref 'DB2EC2SecurityGroup'
      DBSubnetGroupName: !Ref 'DBSubnetGroup'
    DeletionPolicy: Snapshot
  ReplicaDBUser:
    Type: AWS::RDS::DBInstance
    Properties:
      SourceDBInstanceIdentifier: !Ref 'MasterDBUser'
      DBInstanceIdentifier: 'MB3-db-user-rr'
      DBInstanceClass: !Ref 'DBInstanceClass'
      Tags:
      - Key: Name
        Value: Read Replica Database
  ## MB3 Services
  UserDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    DependsOn: DockerBuildWaitCondition
    Properties:
      ContainerDefinitions:
        - Name: user-service
          Image: !Join 
            - ''
            - - !Ref 'AWS::AccountId'
              - .dkr.ecr.
              - !Ref 'AWS::Region'
              - '.amazonaws.com/user-mb3-service'
          Cpu: '100'
          Memory: '100'
          PortMappings:
            - ContainerPort: 5000
          Essential: true
          Environment:
            - Name: USER_USERNAME
              Value: admin
            - Name: USER_PASSWORD
              Value: password
            - Name: SERVICE_5000_NAME
              Value: _user._tcp
  UserService:
    Type: 'AWS::ECS::Service'
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: 2
      TaskDefinition: !Ref UserDefinition
  FrontendDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    DependsOn: DockerBuildWaitCondition
    Properties:
      ContainerDefinitions:
        - Name: frontend-service
          Image: !Join 
            - ''
            - - !Ref 'AWS::AccountId'
              - .dkr.ecr.
              - !Ref 'AWS::Region'
              - '.amazonaws.com/frontend-mb3-service'
          Cpu: '200'
          Memory: '200'
          PortMappings:
            - ContainerPort: 5000
              HostPort: 80
          Essential: true
          Environment:
            - Name: USER_USERNAME
              Value: admin
            - Name: USER_PASSWORD
              Value: password
  
  ## end MB3 Services
  PortalELB:
    Type: 'AWS::ElasticLoadBalancing::LoadBalancer'
    Properties:
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Listeners:
        - LoadBalancerPort: '80'
          InstancePort: '80'
          Protocol: HTTP
      HealthCheck:
        Target: 'HTTP:80/'
        HealthyThreshold: '3'
        UnhealthyThreshold: '5'
        Interval: '30'
        Timeout: '5'
      SecurityGroups:
        - !Ref ECSInstanceSecurityGroup
  FrontendService:
    Type: 'AWS::ECS::Service'
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: 1
      LoadBalancers:
        - ContainerName: frontend-service
          ContainerPort: 5000
          LoadBalancerName: !Ref PortalELB
      TaskDefinition: !Ref FrontendDefinition
      Role: !Ref ECSRole
    DependsOn: ECSRole
Outputs:
  PortalURL:
    Description: Portal URL
    Value: !Join 
      - ''
      - - 'http://'
        - !GetAtt 
          - PortalELB
          - DNSName
        - /
